from pathlib import Path

import pytest

from synse.sbn import SBN_EDGE_TYPE, SBN_NODE_TYPE, SBNGraph, sbn_graphs_are_isomorphic
from synse.sbn_spec import split_comments

EXAMPLES_DIR = Path(__file__).parent / "examples"
SBN_DIR = EXAMPLES_DIR / "sbn"
PM_DIR = EXAMPLES_DIR / "penman"

NORMAL_EXAMPLE_SBN = Path(SBN_DIR / "normal_example.sbn").read_text()
NORMAL_EXAMPLE_PM = Path(PM_DIR / "normal_example.penman").read_text()

ALL_EXAMPLES = [example.read_text() for example in SBN_DIR.glob("*.sbn")]


@pytest.mark.parametrize(
    "line, expected",
    [
        ("%%% This output was generated by the following command:", []),
        (
            "brown.a.01                               % A brown     [0-7]",
            [("brown.a.01", "A brown     [0-7]")],
        ),
        (
            "entity.n.01                                   %                 ",
            [("entity.n.01", None)],
        ),
        (
            "entity.n.01       EQU 7                  % 7 % der       [21-28]",
            [("entity.n.01       EQU 7", "7 % der       [21-28]")],
        ),
    ],
)
def test_split_comments(line, expected):
    assert split_comments(line) == expected


def test_parse_sense_simple_string():
    single_sense = "brown.a.01                             % A brown     [0-7]"
    G = SBNGraph().from_string(single_sense)

    box_id = (SBN_NODE_TYPE.BOX, 0)
    sense_id = (SBN_NODE_TYPE.SENSE, 0)

    # Should have the implict first box and the sense
    assert box_id in G.nodes
    assert sense_id in G.nodes

    # Sense and initial box should be connected
    edge_connection = (box_id, sense_id)
    assert edge_connection in G.edges

    edge_data = G.get_edge_data(*edge_connection)
    assert edge_data["type"] == SBN_EDGE_TYPE.BOX_CONNECT


def test_parse_reconstruct_name():
    test_string = (
        'musical_organization.n.01 Name "Steve Miller Band"'
        "                 % The Steve Miller Band [0-21]"
    )
    G = SBNGraph().from_string(test_string)

    name_const_id = (SBN_NODE_TYPE.CONSTANT, 0)

    assert name_const_id in G.nodes

    assert len(G.nodes) == 3  # box, sense, name
    # box->box-connect->sense, sense->role->name
    assert len(G.edges) == 2

    node_data = G.nodes.get(name_const_id)
    assert node_data["token"] == '"Steve Miller Band"'


@pytest.mark.parametrize("example_string", ALL_EXAMPLES)
def test_can_parse_full_file(example_string):
    # No exceptions means it works
    SBNGraph().from_string(example_string)


@pytest.mark.parametrize("example_string", ALL_EXAMPLES)
def test_can_parse_and_reconstruct(tmp_path, example_string):
    starting_graph = SBNGraph().from_string(example_string)
    path = starting_graph.to_sbn(tmp_path / "test.sbn")
    reconstructed_graph = SBNGraph().from_path(path)

    assert sbn_graphs_are_isomorphic(starting_graph, reconstructed_graph)


@pytest.mark.parametrize("example_string", ALL_EXAMPLES)
def test_can_parse_and_reconstruct_with_comments(tmp_path, example_string):
    starting_graph = SBNGraph().from_string(example_string)
    path = starting_graph.to_sbn(tmp_path / "test.sbn", add_comments=True)
    reconstructed_graph = SBNGraph().from_path(path)

    assert sbn_graphs_are_isomorphic(starting_graph, reconstructed_graph)
